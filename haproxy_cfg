[root@localhost ~]# cat /etc/haproxy/haproxy.cfg
global
        log /dev/log    local0
        log /dev/log    local1 notice
#       chroot /var/lib/haproxy
        chroot /
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
         ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        # ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
         ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000



listen stats
    bind :9000
    mode http
    option dontlog-normal
    stats enable
    stats refresh 10s
    stats realm Haproxy\ Statistics
    stats uri /haproxy


backend trafficrate
    stick-table type ip size 1m expire 60s store conn_cur
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  http-in
    bind *:80
    mode http

   # acl high_traffic fe_conn ge 5

   # stick-table type integer size 100k

   # stick store conn_cur
   # acl high conn_cur gt 3
   # use_backend aws_api_gateway if high
    http-request track-sc0 src table trafficrate
    acl high_traffic sc_conn_cur(0,trafficrate) gt 10

    use_backend aws_api_gateway if high_traffic
    default_backend onprem_kube

    # use_backend onprem_kube if high_traffic
    # default_backend aws_api_gateway
#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------

backend aws_api_gateway
    mode http
    balance     roundrobin
    http-request set-header Host ktaltv6qv7.execute-api.ap-northeast-2.amazonaws.com
    http-request set-path /prod/

    server api_server ktaltv6qv7.execute-api.ap-northeast-2.amazonaws.com:80 check



backend onprem_kube
    mode http
    balance roundrobin
#    server onprem_k8s_1 10.0.0.52:80 check
     server onprem_k8s_2 10.0.0.53:80 check
#    server onprem_k8s_3 10.0.0.54:80 check
#     server onprem_k8s_4 175.196.82.14:80 check
